#+TITLE: Emacs Configuration
#+AUTHOR: Isa Goksu

This file contains my Emacs configuration. I try to cluster all the settings with their respectful categories. Then again it is my categories ;)

* Things to work on

** DONE Cursor color
** DONE Proper UTF8 setup
** DONE Empty scratch buffer
** DONE Change default window gui size
** DONE Distraction-free writing experience
** DONE Snippet Support
** DONE NeoTree setup
** DONE Projectile setup
** DONE Magit setup
** DONE Visual RegExp setup
** DONE Rest Client Setup
** DONE Graphviz setup
** DONE Evil multi edit
** DONE Autocompletion setup
** TODO Python setup
** TODO Better mod-line

* Custom Functions
#+BEGIN_SRC emacs-lisp
    ;; make a better selection of the gui theme
    (defun isa/make-pretty-gui()
      "Customize themes, cursors for my own goodness"
      (load-theme 'base16-mexico-light t)
      (set-cursor-color "#EA2027")
      (blink-cursor-mode 0))

    (defun isa/evil-shift-left-visual ()
      (interactive)
      (evil-shift-left (region-beginning) (region-end))
      (evil-normal-state)
      (evil-visual-restore))

    (defun isa/evil-shift-right-visual ()
      (interactive)
      (evil-shift-right (region-beginning) (region-end))
      (evil-normal-state)
      (evil-visual-restore))
#+END_SRC

* Sensible Defaults

This section contains all the settings about file-encoding, tab/spaces, OS related things and some stupid emacs configurations need to be done.

#+BEGIN_SRC emacs-lisp
  ;; just remove that annoying welcome page
  (setq inhibit-startup-message t)

  ;; OSX related settings
  (defconst *is-a-mac* (eq system-type 'darwin))

  ;; let's make sure everything is in UTF-8
  (set-language-environment 'utf-8)
  (setq locale-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-file-name-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)

  ;; I hate tabs most of the time
  (setq tab-width 2)
  (setq-default indent-tabs-mode nil
                tab-stop-list    ()
                tab-width        2)

  ;; no python indentation guessing game
  (setq-default python-indent-guess-indent-offset nil)
  (custom-set-variables
    '(python-guess-indent nil)
    '(python-indent-offset 2))

  ;; please shorten 'yes' or 'no' prompts
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq confirm-nonexistent-file-or-buffer nil)

  ;; please when I press 'C-x k', just kill the current one without asking
  (global-set-key (kbd "C-x k") 'kill-this-buffer)

  ;; some modes needed to be enabled by default IMO
  (column-number-mode)
  ;; (global-linum-mode)
  (global-auto-revert-mode t)
  (setq auto-revert-verbose nil)
  (setq backup-inhibited t)
  (global-visual-line-mode)

  ;; some white-space magic
  (whitespace-mode)
  (add-hook 'before-save-hook 'whitespace-cleanup)

  ;; no scratch messages
  (setq initial-scratch-message nil)
  (defun display-startup-echo-area-message ()
    (message "Let the hacking begin!"))

  ;; enable WindMove
  (when (fboundp 'windmove-default-keybindings)
    (windmove-default-keybindings))
  (global-set-key (kbd "C-c h") 'windmove-left)
  (global-set-key (kbd "C-c l") 'windmove-right)
  (global-set-key (kbd "C-c k") 'windmove-up)
  (global-set-key (kbd "C-c j") 'windmove-down)
#+END_SRC
* Package Related Everything
#+BEGIN_SRC emacs-lisp
  ;; use-package for everything else
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; let's make sure OSX PATH is in exec list
  (use-package  exec-path-from-shell :ensure t
    :config
      (if *is-a-mac*
        (add-hook 'after-init-hook 'exec-path-from-shell-initialize)))

  ;; get better emacs defaults
  (use-package better-defaults :ensure t)

  ;; tell me which options are available
  ;; everytime I press a key combo
  (use-package which-key :ensure t
    :config (which-key-mode t))

  ;; I don't think I can survive w/o vim bindings
  (use-package evil :ensure t
    :config
      (define-key evil-insert-state-map (kbd "TAB") 'tab-to-tab-stop)
      (define-key evil-visual-state-map (kbd ">") 'isa/evil-shift-right-visual)
      (define-key evil-visual-state-map (kbd "<") 'isa/evil-shift-left-visual)
      (define-key evil-visual-state-map [tab] 'isa/evil-shift-right-visual)
      (define-key evil-visual-state-map [S-tab] 'isa/evil-shift-left-visual)
      (evil-mode))

  ;; multi-edit support for evil
  (use-package evil-multiedit :ensure t
    :config (evil-multiedit-default-keybinds))

  ;; Let's install counsel and its friends
  (use-package counsel :ensure t
    :bind (("M-y" . counsel-yank-pop)
    :map ivy-minibuffer-map ("M-y" . ivy-next-line)))

  (use-package ivy :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))

  (use-package swiper :ensure try
    :bind (("C-s" . swiper)
         ("C-r" . swiper)
         ("M-x" . counsel-M-x)
         ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)))

  ;; bring some file-browsing support, and make sure
  ;; you run 'all-the-icons-install-fonts' once before using
  (use-package all-the-icons :ensure t)
  (use-package neotree :ensure t
    :config (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))

  ;; let's start some python magic
  (use-package pyenv-mode :ensure t
    :config (pyenv-mode))

  ;; for days like no distraction needed
  (use-package writeroom-mode :ensure t)

  ;; snippets are awesome
  (use-package yasnippet :ensure t
    :config
      (yas-global-mode))
  (use-package yasnippet-snippets :ensure t)

  ;; adding projectile support
  (use-package projectile :ensure t)
  (use-package counsel-projectile :ensure t
    :config (counsel-projectile-mode t))

  ;; MAGIT or not, that's the matter
  (use-package magit :ensure t
    :config (global-set-key (kbd "C-c m") 'magit-status))

  ;; small, but effective tool at times
  (use-package visual-regexp :ensure t)

  ;; a proper rest client
  (use-package restclient :ensure t)

  ;; graphviz support
  (use-package graphviz-dot-mode :ensure t)

  ;; auto-completion support
  (use-package auto-complete :ensure t
    :config
      (ac-config-default)
      (global-auto-complete-mode)
      (setq ac-auto-start nil) ;; do not start auto-complete unless I press
      (global-set-key "\M-/" 'auto-complete)
      (setq-default ac-sources '(ac-source-words-in-all-buffer)))
#+END_SRC

* UI Customizations
#+BEGIN_SRC emacs-lisp
  ;; load custom themes
  (add-to-list 'load-path "~/.emacs.d/themes/")
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (setq custom-safe-themes t)

  ;; good looking themes
  (use-package base16-theme :ensure t)
  (use-package danneskjold-theme :ensure t)

  ;; different themes for different UIs
  (if (display-graphic-p)
    (add-hook 'after-init-hook 'isa/make-pretty-gui)
    (add-hook 'after-init-hook
      (lambda () (load-theme 'danneskjold t))))

  ;; please no toolbar and menubar
  (menu-bar-mode 0)
  (when (window-system)
    (tool-bar-mode 0)
    (scroll-bar-mode 0)

    ;; customize font
    (add-to-list 'default-frame-alist '(font . "Fira Code-16" ))
    (set-face-attribute 'default t :font "Fira Code-16")
    (custom-set-faces
      '(default ((t (:background nil :foreground nil))))
      '(fringe ((t (:background nil)))))
    (setq-default line-spacing 6)

    ;; proper line numbers
    (setq linum-format "%3d ")

    ;; a proper window size on launch
    (set-frame-position (selected-frame) 1050 70)
    (set-frame-size (selected-frame) 81 47))

    ;; yasnippet colors
    (set-face-attribute 'yas-field-highlight-face nil :background "#fdcb6e")

    ;; auto-complete colors
    (set-face-background 'ac-candidate-face "#ecf0f1")
    (set-face-background 'ac-selection-face "#a29bfe")
    (set-face-foreground 'ac-completion-face "#3498db")
    (set-face-background 'popup-tip-face "#ffeaa7")
    (set-face-underline 'ac-completion-face "#e74c3c")
#+END_SRC
* Mode Line Customizations
#+BEGIN_SRC emacs-lisp
  ;; install a mode-line base
#+END_SRC
* Org-mode Configurations
#+BEGIN_SRC emacs-lisp
  ;; let's make sure latest and greatest is here
  (use-package org :init
    ;; Install Org from ELPA if not already
    (unless (package-installed-p 'org (version-to-list "9.1.6"))
      (package-refresh-contents)
      (package-install (cadr (assq 'org package-archive-contents)))))

  (use-package org :ensure org-plus-contrib :pin org)

  ;; fancy looking bullets for org-mode
  (use-package org-bullets :ensure t
    :config (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Personal Information

My personal information

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Isa Goksu")
  (setq user-mail-address "isa.goksu@gmail.com")
#+END_SRC
